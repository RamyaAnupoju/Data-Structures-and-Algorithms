"""
Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.

According to the definition of LCA on Wikipedia: The lowest common ancestor is defined between 
nodes p and q as the lowest node in T that has both p and q as descendants 
(where we allow a node to be a descendant of itself)
Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1
Output: 3
Explanation: The LCA of nodes 5 and 1 is 3.
"""
class Solution:
    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
        self.ans = None
        def dfs(root):
            if not root:
                return 0
            left = dfs(root.left)
            right = dfs(root.right)
            if root == p or root == q:
                curr =1
            else:
                curr = 0
            if (curr and left) or (curr and right) or (left and right):
                self.ans = root
                return 0
            return curr + left+right
        dfs(root)
        return self.ans
            
